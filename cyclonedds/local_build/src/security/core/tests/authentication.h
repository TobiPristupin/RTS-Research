#define CU_TheoryDataPointsSize_ddssec_authentication_id_ca_certs(datapoints) ( datapoints.test_descr.n )
#define CU_TheoryDataPointsSlice_ddssec_authentication_id_ca_certs(datapoints, index) ( datapoints.test_descr.p[index], datapoints.id2.p[index], datapoints.key2.p[index], datapoints.ca2.p[index], datapoints.exp_fail_pp1.p[index], datapoints.exp_fail_pp2.p[index], datapoints.exp_fail_local.p[index], datapoints.fail_local_msg.p[index], datapoints.exp_fail_hs_req.p[index], datapoints.fail_hs_req_msg.p[index], datapoints.exp_fail_hs_reply.p[index], datapoints.fail_hs_reply_msg.p[index] )
#define CU_TheoryDataPointsTypedef_ddssec_authentication_id_ca_certs() { struct { size_t n; const char * *p; } test_descr; struct { size_t n; const char * *p; } id2; struct { size_t n; const char * *p; } key2; struct { size_t n; const char * *p; } ca2; struct { size_t n; bool *p; } exp_fail_pp1; struct { size_t n; bool *p; } exp_fail_pp2; struct { size_t n; bool *p; } exp_fail_local; struct { size_t n; const char * *p; } fail_local_msg; struct { size_t n; bool *p; } exp_fail_hs_req; struct { size_t n; const char * *p; } fail_hs_req_msg; struct { size_t n; bool *p; } exp_fail_hs_reply; struct { size_t n; const char * *p; } fail_hs_reply_msg; }
#define CU_TheoryDataPointsSize_ddssec_authentication_trusted_ca_dir(datapoints) ( datapoints.ca_dir.n )
#define CU_TheoryDataPointsSlice_ddssec_authentication_trusted_ca_dir(datapoints, index) ( datapoints.ca_dir.p[index], datapoints.exp_fail.p[index] )
#define CU_TheoryDataPointsTypedef_ddssec_authentication_trusted_ca_dir() { struct { size_t n; const char * *p; } ca_dir; struct { size_t n; bool *p; } exp_fail; }
#define CU_TheoryDataPointsSize_ddssec_authentication_expired_cert(datapoints) ( datapoints.test_descr.n )
#define CU_TheoryDataPointsSlice_ddssec_authentication_expired_cert(datapoints, index) ( datapoints.test_descr.p[index], datapoints.ca_not_before.p[index], datapoints.ca_not_after.p[index], datapoints.id1_not_before.p[index], datapoints.id1_not_after.p[index], datapoints.id1_local_fail.p[index], datapoints.id2_not_before.p[index], datapoints.id2_not_after.p[index], datapoints.id2_local_fail.p[index], datapoints.delay.p[index], datapoints.write_read_dur.p[index], datapoints.exp_read_fail.p[index] )
#define CU_TheoryDataPointsTypedef_ddssec_authentication_expired_cert() { struct { size_t n; const char * *p; } test_descr; struct { size_t n; int32_t *p; } ca_not_before; struct { size_t n; int32_t *p; } ca_not_after; struct { size_t n; int32_t *p; } id1_not_before; struct { size_t n; int32_t *p; } id1_not_after; struct { size_t n; bool *p; } id1_local_fail; struct { size_t n; int32_t *p; } id2_not_before; struct { size_t n; int32_t *p; } id2_not_after; struct { size_t n; bool *p; } id2_local_fail; struct { size_t n; uint32_t *p; } delay; struct { size_t n; uint32_t *p; } write_read_dur; struct { size_t n; bool *p; } exp_read_fail; }
#define CU_TheoryDataPointsSize_ddssec_authentication_crl(datapoints) ( datapoints.crl.n )
#define CU_TheoryDataPointsSlice_ddssec_authentication_crl(datapoints, index) ( datapoints.crl.p[index], datapoints.exp_fail.p[index] )
#define CU_TheoryDataPointsTypedef_ddssec_authentication_crl() { struct { size_t n; const char * *p; } crl; struct { size_t n; bool *p; } exp_fail; }
